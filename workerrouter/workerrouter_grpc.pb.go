// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: workerrouter/workerrouter.proto

package workerrouter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerRouterClient is the client API for WorkerRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerRouterClient interface {
	Pull(ctx context.Context, opts ...grpc.CallOption) (WorkerRouter_PullClient, error)
	Complete(ctx context.Context, in *TaskComplete, opts ...grpc.CallOption) (*Empty, error)
}

type workerRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerRouterClient(cc grpc.ClientConnInterface) WorkerRouterClient {
	return &workerRouterClient{cc}
}

func (c *workerRouterClient) Pull(ctx context.Context, opts ...grpc.CallOption) (WorkerRouter_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkerRouter_ServiceDesc.Streams[0], "/workerrouter.WorkerRouter/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerRouterPullClient{stream}
	return x, nil
}

type WorkerRouter_PullClient interface {
	Send(*Empty) error
	Recv() (*Task, error)
	grpc.ClientStream
}

type workerRouterPullClient struct {
	grpc.ClientStream
}

func (x *workerRouterPullClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerRouterPullClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerRouterClient) Complete(ctx context.Context, in *TaskComplete, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/workerrouter.WorkerRouter/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerRouterServer is the server API for WorkerRouter service.
// All implementations must embed UnimplementedWorkerRouterServer
// for forward compatibility
type WorkerRouterServer interface {
	Pull(WorkerRouter_PullServer) error
	Complete(context.Context, *TaskComplete) (*Empty, error)
	mustEmbedUnimplementedWorkerRouterServer()
}

// UnimplementedWorkerRouterServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerRouterServer struct {
}

func (UnimplementedWorkerRouterServer) Pull(WorkerRouter_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedWorkerRouterServer) Complete(context.Context, *TaskComplete) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedWorkerRouterServer) mustEmbedUnimplementedWorkerRouterServer() {}

// UnsafeWorkerRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerRouterServer will
// result in compilation errors.
type UnsafeWorkerRouterServer interface {
	mustEmbedUnimplementedWorkerRouterServer()
}

func RegisterWorkerRouterServer(s grpc.ServiceRegistrar, srv WorkerRouterServer) {
	s.RegisterService(&WorkerRouter_ServiceDesc, srv)
}

func _WorkerRouter_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerRouterServer).Pull(&workerRouterPullServer{stream})
}

type WorkerRouter_PullServer interface {
	Send(*Task) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type workerRouterPullServer struct {
	grpc.ServerStream
}

func (x *workerRouterPullServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerRouterPullServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WorkerRouter_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskComplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerRouterServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workerrouter.WorkerRouter/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerRouterServer).Complete(ctx, req.(*TaskComplete))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerRouter_ServiceDesc is the grpc.ServiceDesc for WorkerRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workerrouter.WorkerRouter",
	HandlerType: (*WorkerRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Complete",
			Handler:    _WorkerRouter_Complete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _WorkerRouter_Pull_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "workerrouter/workerrouter.proto",
}
